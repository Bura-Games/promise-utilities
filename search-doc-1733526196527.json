{"searchDocs":[{"title":"Getting Started with PromiseUtilities","type":0,"sectionRef":"#","url":"/promise-utilities/docs/intro","content":"Getting Started with PromiseUtilities Here are some quick links to get started using PromiseUtilities: Installation guideAPI Docs","keywords":"","version":"Next"},{"title":"Installation","type":0,"sectionRef":"#","url":"/promise-utilities/docs/installation","content":"","keywords":"","version":"Next"},{"title":"Method #1 - RepoToRoblox​","type":1,"pageTitle":"Installation","url":"/promise-utilities/docs/installation#method-1---repotoroblox","content":" Using the RepoToRoblox plugin is the easiest way to install in Studio.  In the RepoToRoblox widget, enter bura-games as the owner and promise-utilities as the repository.Click the Clone Repository button.  ","version":"Next","tagName":"h2"},{"title":"Method 2 - Wally​","type":1,"pageTitle":"Installation","url":"/promise-utilities/docs/installation#method-2---wally","content":" Setup Wally by using wally init.Add howmanysmall/promise-utilities as a dependency.  [dependencies] ThreadUtilities = &quot;howmanysmall/promise-utilities@^1.1.0&quot;  ","version":"Next","tagName":"h2"},{"title":"PromiseUtilities","type":0,"sectionRef":"#","url":"/promise-utilities/api/PromiseUtilities","content":"","keywords":"","version":null},{"title":"Functions​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#functions","content":" ","version":null,"tagName":"h2"},{"title":"FastAsyncMulti​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#FastAsyncMulti","content":"&lt;/&gt; PromiseUtilities.FastAsyncMulti(callback: (Arguments...) → Returns...) → (Arguments...) → Promise&lt;Returns...&gt; A function that turns another function into the same as an async function in ECMAScript. This supports multiple returns however. async function promiseUpperAndLower(value: string) { return [value.toUpperCase(), value.toLowerCase()]; } would basically be equivalent to: local function GetUpperAndLowerAsync(value: string) return string.upper(value), string.lower(value) end local PromiseUpperAndLower = PromiseUtilities.FastAsyncMulti(GetUpperAndLowerAsync)   ","version":null,"tagName":"h3"},{"title":"Async​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#Async","content":"&lt;/&gt; PromiseUtilities.Async(callback: (Arguments...) → Returns) → (Arguments...) → Promise&lt;Returns&gt; A function that turns another function into the same as an async function in ECMAScript. This was taken from here. async function promiseGet(url: string) { return HttpService.GetAsync(url); } would basically be equivalent to: local function GetAsync(url: string) return HttpService:GetAsync(url) end local PromiseGet = PromiseUtilities.Async(GetAsync) INFO This is meant to be entirely equivalent to the TypeScript version. I would recommend using PromiseUtilities.FastAsync instead for better performance.  ","version":null,"tagName":"h3"},{"title":"AsyncVoid​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#AsyncVoid","content":"&lt;/&gt; PromiseUtilities.AsyncVoid(callback: (Arguments...) → void) → (Arguments...) → Promise&lt;void&gt; Basically equivalent to PromiseUtilities.Async, except you are not expected to have any return. This only exists because Luau's type system is not the greatest at handling this.  ","version":null,"tagName":"h3"},{"title":"AsyncMulti​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#AsyncMulti","content":"&lt;/&gt; PromiseUtilities.AsyncMulti(callback: (Arguments...) → Returns...) → (Arguments...) → Promise&lt;Returns...&gt; A function that turns another function into the same as an async function in ECMAScript. This supports multiple returns however. async function promiseUpperAndLower(value: string) { return [value.toUpperCase(), value.toLowerCase()]; } would basically be equivalent to: local function GetUpperAndLowerAsync(value: string) return string.upper(value), string.lower(value) end local PromiseUpperAndLower = PromiseUtilities.AsyncMulti(GetUpperAndLowerAsync) INFO This is meant to be entirely equivalent to the TypeScript version. I would recommend using PromiseUtilities.FastAsyncMulti instead for better performance.  ","version":null,"tagName":"h3"},{"title":"FastAsync​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#FastAsync","content":"&lt;/&gt; PromiseUtilities.FastAsync(callback: (Arguments...) → Returns) → (Arguments...) → Promise&lt;Returns&gt; A function that turns another function into the same as an async function in ECMAScript. This uses a thread recycling &quot;fast spawn&quot; function instead of coroutine.wrap. async function promiseGet(url: string) { return HttpService.GetAsync(url); } would basically be equivalent to: local function GetAsync(url: string) return HttpService:GetAsync(url) end local PromiseGet = PromiseUtilities.FastAsync(GetAsync)   ","version":null,"tagName":"h3"},{"title":"FastAsyncVoid​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#FastAsyncVoid","content":"&lt;/&gt; PromiseUtilities.FastAsyncVoid(callback: (Arguments...) → void) → (Arguments...) → Promise&lt;void&gt; Basically equivalent to PromiseUtilities.FastAsync, except you are not expected to have any return. This only exists because Luau's type system is not the greatest at handling this.  ","version":null,"tagName":"h3"},{"title":"AwaitMulti​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#AwaitMulti","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PromiseUtilities.AwaitMulti(...: T | Promise&lt;T...&gt;) → T The functionality of this is meant to be the same as the await keyword in ECMAScript. This allows returning multiple values! local function PromiseUpperAndLower(value: string): Promise&lt;string, string&gt; return Promise.new(function(resolve) resolve(string.upper(value), string.lower(value)) end) end local upper, lower = PromiseUtilities.AwaitMulti(PromiseUpperAndLower(&quot;Hello there!&quot;)) Behavior This function is almost entirely identical to Promise.expect. You can probably just use that instead! ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities##","content":"Type\tDescriptionCancelledError\tThrown if the Promise was cancelled. RejectedError\tThrown if the Promise was rejected.  ","version":null,"tagName":"h3"},{"title":"Await​","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities#Await","content":"This is a yielding function. When called, it will pause the Lua thread that called the function until a result is ready to be returned, without interrupting other scripts. Yields &lt;/&gt; PromiseUtilities.Await(promiseOrValue: Promise&lt;T&gt; | T) → T The functionality of this is meant to be the same as the await keyword in ECMAScript. async function promiseGet(url: string) { return HttpService.GetAsync(url); } const result = await promiseGet(&quot;https://example.com&quot;); -- This is good practice - you don't really lose debug info this way. local function GetAsync(url: string) return HttpService:GetAsync(url) end local PromiseGet = PromiseUtilities.FastAsync(GetAsync) local result = PromiseUtilities.Await(PromiseGet(&quot;https://example.com&quot;)) Behavior This function is almost entirely identical to Promise.expect. You can probably just use that instead! ","version":null,"tagName":"h3"},{"title":"Errors","type":1,"pageTitle":"PromiseUtilities","url":"/promise-utilities/api/PromiseUtilities##","content":"Type\tDescriptionCancelledError\tThrown if the Promise was cancelled. RejectedError\tThrown if the Promise was rejected. ","version":null,"tagName":"h3"}],"options":{"id":"default"}}