"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[816],{4387:e=>{e.exports=JSON.parse('{"functions":[{"name":"FastAsyncMulti","desc":"A function that turns another function into the same as an async function\\nin ECMAScript. This supports multiple returns however.\\n\\n```ts\\nasync function promiseUpperAndLower(value: string) {\\n\\treturn [value.toUpperCase(), value.toLowerCase()];\\n}\\n```\\n\\nwould basically be equivalent to:\\n\\n```lua\\nlocal function GetUpperAndLowerAsync(value: string)\\n\\treturn string.upper(value), string.lower(value)\\nend\\n\\nlocal PromiseUpperAndLower = PromiseUtilities.FastAsyncMulti(GetUpperAndLowerAsync)\\n```","params":[{"name":"callback","desc":"","lua_type":"(Arguments...) -> Returns..."}],"returns":[{"desc":"","lua_type":"(Arguments...) -> Promise<Returns...>"}],"function_type":"static","source":{"line":42,"path":"src/FastAsyncMulti.luau"}},{"name":"Async","desc":"A function that turns another function into the same as an async function\\nin ECMAScript. This was taken from [here](https://github.com/roblox-ts/roblox-ts/blob/master/include/RuntimeLib.lua).\\n\\n```ts\\nasync function promiseGet(url: string) {\\n\\treturn HttpService.GetAsync(url);\\n}\\n```\\n\\nwould basically be equivalent to:\\n\\n```lua\\nlocal function GetAsync(url: string)\\n\\treturn HttpService:GetAsync(url)\\nend\\n\\nlocal PromiseGet = PromiseUtilities.Async(GetAsync)\\n```\\n\\n:::info\\nThis is meant to be entirely equivalent to the TypeScript version. I would\\nrecommend using [PromiseUtilities.FastAsync] instead for better\\nperformance.\\n:::","params":[{"name":"callback","desc":"","lua_type":"(Arguments...) -> Returns"}],"returns":[{"desc":"","lua_type":"(Arguments...) -> Promise<Returns>"}],"function_type":"static","source":{"line":38,"path":"src/Async.luau"}},{"name":"AsyncVoid","desc":"Basically equivalent to [PromiseUtilities.Async], except you are not\\nexpected to have any return. This only exists because Luau\'s type system\\nis not the greatest at handling this.","params":[{"name":"callback","desc":"","lua_type":"(Arguments...) -> void"}],"returns":[{"desc":"","lua_type":"(Arguments...) -> Promise<void>"}],"function_type":"static","source":{"line":69,"path":"src/Async.luau"}},{"name":"AsyncMulti","desc":"A function that turns another function into the same as an async function\\nin ECMAScript. This supports multiple returns however.\\n\\n```ts\\nasync function promiseUpperAndLower(value: string) {\\n\\treturn [value.toUpperCase(), value.toLowerCase()];\\n}\\n```\\n\\nwould basically be equivalent to:\\n\\n```lua\\nlocal function GetUpperAndLowerAsync(value: string)\\n\\treturn string.upper(value), string.lower(value)\\nend\\n\\nlocal PromiseUpperAndLower = PromiseUtilities.AsyncMulti(GetUpperAndLowerAsync)\\n```\\n\\n:::info\\nThis is meant to be entirely equivalent to the TypeScript version. I would\\nrecommend using [PromiseUtilities.FastAsyncMulti] instead for better\\nperformance.\\n:::","params":[{"name":"callback","desc":"","lua_type":"(Arguments...) -> Returns..."}],"returns":[{"desc":"","lua_type":"(Arguments...) -> Promise<Returns...>"}],"function_type":"static","source":{"line":47,"path":"src/AsyncMulti.luau"}},{"name":"FastAsync","desc":"A function that turns another function into the same as an async function\\nin ECMAScript. This uses a thread recycling \\"fast spawn\\" function instead\\nof `coroutine.wrap`.\\n\\n```ts\\nasync function promiseGet(url: string) {\\n\\treturn HttpService.GetAsync(url);\\n}\\n```\\n\\nwould basically be equivalent to:\\n\\n```lua\\nlocal function GetAsync(url: string)\\n\\treturn HttpService:GetAsync(url)\\nend\\n\\nlocal PromiseGet = PromiseUtilities.FastAsync(GetAsync)\\n```","params":[{"name":"callback","desc":"","lua_type":"(Arguments...) -> Returns"}],"returns":[{"desc":"","lua_type":"(Arguments...) -> Promise<Returns>"}],"function_type":"static","source":{"line":34,"path":"src/FastAsync.luau"}},{"name":"FastAsyncVoid","desc":"Basically equivalent to [PromiseUtilities.FastAsync], except you are not\\nexpected to have any return. This only exists because Luau\'s type system\\nis not the greatest at handling this.","params":[{"name":"callback","desc":"","lua_type":"(Arguments...) -> void"}],"returns":[{"desc":"","lua_type":"(Arguments...) -> Promise<void>"}],"function_type":"static","source":{"line":65,"path":"src/FastAsync.luau"}},{"name":"AwaitMulti","desc":"The functionality of this is meant to be the same as the `await` keyword in\\nECMAScript. This allows returning multiple values!\\n\\n```lua\\nlocal function PromiseUpperAndLower(value: string): Promise<string, string>\\n\\treturn Promise.new(function(resolve)\\n\\t\\tresolve(string.upper(value), string.lower(value))\\n\\tend)\\nend\\nlocal upper, lower = PromiseUtilities.AwaitMulti(PromiseUpperAndLower(\\"Hello there!\\"))\\n```\\n\\n:::tip Behavior\\nThis function is almost entirely identical to `Promise.expect`. You can\\nprobably just use that instead!\\n:::","params":[{"name":"...","desc":"","lua_type":"T | Promise<T...>"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","errors":[{"lua_type":"CancelledError","desc":"Thrown if the Promise was cancelled."},{"lua_type":"RejectedError","desc":"Thrown if the Promise was rejected."}],"yields":true,"source":{"line":43,"path":"src/AwaitMulti.luau"}},{"name":"Await","desc":"The functionality of this is meant to be the same as the `await` keyword in\\nECMAScript.\\n\\n```ts\\nasync function promiseGet(url: string) {\\n\\treturn HttpService.GetAsync(url);\\n}\\n\\nconst result = await promiseGet(\\"https://example.com\\");\\n```\\n\\n```lua\\n-- This is good practice - you don\'t really lose debug info this way.\\nlocal function GetAsync(url: string)\\n\\treturn HttpService:GetAsync(url)\\nend\\n\\nlocal PromiseGet = PromiseUtilities.FastAsync(GetAsync)\\nlocal result = PromiseUtilities.Await(PromiseGet(\\"https://example.com\\"))\\n```\\n\\n:::tip Behavior\\nThis function is almost entirely identical to `Promise.expect`. You can\\nprobably just use that instead!\\n:::","params":[{"name":"promiseOrValue","desc":"","lua_type":"Promise<T> | T"}],"returns":[{"desc":"","lua_type":"T"}],"function_type":"static","errors":[{"lua_type":"CancelledError","desc":"Thrown if the Promise was cancelled."},{"lua_type":"RejectedError","desc":"Thrown if the Promise was rejected."}],"yields":true,"source":{"line":43,"path":"src/Await.luau"}}],"properties":[],"types":[],"name":"PromiseUtilities","desc":"Utilities for working with Promises.","source":{"line":26,"path":"src/init.luau"}}')}}]);